// Autogenerated from Pigeon (v22.6.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> PigeonError {
  return PigeonError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum RepeatMode: Int {
  case off = 0
  case one = 1
  case all = 2
}

enum ShuffleMode: Int {
  case off = 0
  case on = 1
}

/// Generated class from Pigeon that represents data sent in messages.
struct SongDTO {
  var id: String
  var name: String
  var albumId: String
  var albumName: String
  var artistId: String
  var artistName: String
  var imageId: String
  var duration: Double
  var trackNumber: Double



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> SongDTO? {
    let id = pigeonVar_list[0] as! String
    let name = pigeonVar_list[1] as! String
    let albumId = pigeonVar_list[2] as! String
    let albumName = pigeonVar_list[3] as! String
    let artistId = pigeonVar_list[4] as! String
    let artistName = pigeonVar_list[5] as! String
    let imageId = pigeonVar_list[6] as! String
    let duration = pigeonVar_list[7] as! Double
    let trackNumber = pigeonVar_list[8] as! Double

    return SongDTO(
      id: id,
      name: name,
      albumId: albumId,
      albumName: albumName,
      artistId: artistId,
      artistName: artistName,
      imageId: imageId,
      duration: duration,
      trackNumber: trackNumber
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      name,
      albumId,
      albumName,
      artistId,
      artistName,
      imageId,
      duration,
      trackNumber,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct AlbumDTO {
  var id: String
  var name: String
  var artistId: String
  var artistName: String
  var imageId: String



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> AlbumDTO? {
    let id = pigeonVar_list[0] as! String
    let name = pigeonVar_list[1] as! String
    let artistId = pigeonVar_list[2] as! String
    let artistName = pigeonVar_list[3] as! String
    let imageId = pigeonVar_list[4] as! String

    return AlbumDTO(
      id: id,
      name: name,
      artistId: artistId,
      artistName: artistName,
      imageId: imageId
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      name,
      artistId,
      artistName,
      imageId,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ArtistDTO {
  var id: String
  var name: String



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ArtistDTO? {
    let id = pigeonVar_list[0] as! String
    let name = pigeonVar_list[1] as! String

    return ArtistDTO(
      id: id,
      name: name
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      name,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ArtistDetailDTO {
  var id: String
  var name: String
  var imageId: String



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ArtistDetailDTO? {
    let id = pigeonVar_list[0] as! String
    let name = pigeonVar_list[1] as! String
    let imageId = pigeonVar_list[2] as! String

    return ArtistDetailDTO(
      id: id,
      name: name,
      imageId: imageId
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      name,
      imageId,
    ]
  }
}

private class AudioPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return RepeatMode(rawValue: enumResultAsInt)
      }
      return nil
    case 130:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return ShuffleMode(rawValue: enumResultAsInt)
      }
      return nil
    case 131:
      return SongDTO.fromList(self.readValue() as! [Any?])
    case 132:
      return AlbumDTO.fromList(self.readValue() as! [Any?])
    case 133:
      return ArtistDTO.fromList(self.readValue() as! [Any?])
    case 134:
      return ArtistDetailDTO.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class AudioPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? RepeatMode {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else if let value = value as? ShuffleMode {
      super.writeByte(130)
      super.writeValue(value.rawValue)
    } else if let value = value as? SongDTO {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? AlbumDTO {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? ArtistDTO {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? ArtistDetailDTO {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class AudioPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return AudioPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return AudioPigeonCodecWriter(data: data)
  }
}

class AudioPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = AudioPigeonCodec(readerWriter: AudioPigeonCodecReaderWriter())
}


///
/// HostApi
///
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol SongHostApi {
  func getAllSongs() throws -> [SongDTO]
  func getSongsByAlbumId(albumId: String) throws -> [SongDTO]
  func getSongsByArtistId(artistId: String) throws -> [SongDTO]
  func getSongsByIds(ids: [String]) throws -> [SongDTO]
  func getSongById(id: String) throws -> SongDTO?
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class SongHostApiSetup {
  static var codec: FlutterStandardMessageCodec { AudioPigeonCodec.shared }
  /// Sets up an instance of `SongHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: SongHostApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let getAllSongsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.thinmpf.SongHostApi.getAllSongs\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getAllSongsChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getAllSongs()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getAllSongsChannel.setMessageHandler(nil)
    }
    let getSongsByAlbumIdChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.thinmpf.SongHostApi.getSongsByAlbumId\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getSongsByAlbumIdChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let albumIdArg = args[0] as! String
        do {
          let result = try api.getSongsByAlbumId(albumId: albumIdArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getSongsByAlbumIdChannel.setMessageHandler(nil)
    }
    let getSongsByArtistIdChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.thinmpf.SongHostApi.getSongsByArtistId\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getSongsByArtistIdChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let artistIdArg = args[0] as! String
        do {
          let result = try api.getSongsByArtistId(artistId: artistIdArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getSongsByArtistIdChannel.setMessageHandler(nil)
    }
    let getSongsByIdsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.thinmpf.SongHostApi.getSongsByIds\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getSongsByIdsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idsArg = args[0] as! [String]
        do {
          let result = try api.getSongsByIds(ids: idsArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getSongsByIdsChannel.setMessageHandler(nil)
    }
    let getSongByIdChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.thinmpf.SongHostApi.getSongById\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getSongByIdChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        do {
          let result = try api.getSongById(id: idArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getSongByIdChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol AlbumHostApi {
  func getAllAlbums() throws -> [AlbumDTO]
  func getAlbumsByArtistId(artistId: String) throws -> [AlbumDTO]
  func getRecentAlbums(count: Int64) throws -> [AlbumDTO]
  func getAlbumById(id: String) throws -> AlbumDTO?
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class AlbumHostApiSetup {
  static var codec: FlutterStandardMessageCodec { AudioPigeonCodec.shared }
  /// Sets up an instance of `AlbumHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: AlbumHostApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let getAllAlbumsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.thinmpf.AlbumHostApi.getAllAlbums\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getAllAlbumsChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getAllAlbums()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getAllAlbumsChannel.setMessageHandler(nil)
    }
    let getAlbumsByArtistIdChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.thinmpf.AlbumHostApi.getAlbumsByArtistId\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getAlbumsByArtistIdChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let artistIdArg = args[0] as! String
        do {
          let result = try api.getAlbumsByArtistId(artistId: artistIdArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getAlbumsByArtistIdChannel.setMessageHandler(nil)
    }
    let getRecentAlbumsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.thinmpf.AlbumHostApi.getRecentAlbums\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getRecentAlbumsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let countArg = args[0] as! Int64
        do {
          let result = try api.getRecentAlbums(count: countArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getRecentAlbumsChannel.setMessageHandler(nil)
    }
    let getAlbumByIdChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.thinmpf.AlbumHostApi.getAlbumById\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getAlbumByIdChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        do {
          let result = try api.getAlbumById(id: idArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getAlbumByIdChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol ArtistHostApi {
  func getAllArtists() throws -> [ArtistDTO]
  func getArtistDetailById(id: String) throws -> ArtistDetailDTO?
  func getArtistsByIds(ids: [String]) throws -> [ArtistDTO]
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class ArtistHostApiSetup {
  static var codec: FlutterStandardMessageCodec { AudioPigeonCodec.shared }
  /// Sets up an instance of `ArtistHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: ArtistHostApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let getAllArtistsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.thinmpf.ArtistHostApi.getAllArtists\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getAllArtistsChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getAllArtists()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getAllArtistsChannel.setMessageHandler(nil)
    }
    let getArtistDetailByIdChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.thinmpf.ArtistHostApi.getArtistDetailById\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getArtistDetailByIdChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        do {
          let result = try api.getArtistDetailById(id: idArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getArtistDetailByIdChannel.setMessageHandler(nil)
    }
    let getArtistsByIdsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.thinmpf.ArtistHostApi.getArtistsByIds\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getArtistsByIdsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idsArg = args[0] as! [String]
        do {
          let result = try api.getArtistsByIds(ids: idsArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getArtistsByIdsChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol ArtworkHostApi {
  func getArtwork(id: String, completion: @escaping (Result<FlutterStandardTypedData?, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class ArtworkHostApiSetup {
  static var codec: FlutterStandardMessageCodec { AudioPigeonCodec.shared }
  /// Sets up an instance of `ArtworkHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: ArtworkHostApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let getArtworkChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.thinmpf.ArtworkHostApi.getArtwork\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getArtworkChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        api.getArtwork(id: idArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getArtworkChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol PlayerHostApi {
  func start(index: Int64, ids: [String], repeatMode: RepeatMode, shuffleMode: ShuffleMode) throws
  func startAllSongs(index: Int64, repeatMode: RepeatMode, shuffleMode: ShuffleMode) throws
  func startAlbumSongs(index: Int64, albumId: String, repeatMode: RepeatMode, shuffleMode: ShuffleMode) throws
  func startArtistSongs(index: Int64, artistId: String, repeatMode: RepeatMode, shuffleMode: ShuffleMode) throws
  func play() throws
  func pause() throws
  func prev() throws
  func next() throws
  func seek(time: Double) throws
  func setRepeat(repeatMode: RepeatMode) throws
  func setShuffle(shuffleMode: ShuffleMode) throws
  func getCurrentTime() throws -> Double
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class PlayerHostApiSetup {
  static var codec: FlutterStandardMessageCodec { AudioPigeonCodec.shared }
  /// Sets up an instance of `PlayerHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: PlayerHostApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let startChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.thinmpf.PlayerHostApi.start\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let indexArg = args[0] as! Int64
        let idsArg = args[1] as! [String]
        let repeatModeArg = args[2] as! RepeatMode
        let shuffleModeArg = args[3] as! ShuffleMode
        do {
          try api.start(index: indexArg, ids: idsArg, repeatMode: repeatModeArg, shuffleMode: shuffleModeArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      startChannel.setMessageHandler(nil)
    }
    let startAllSongsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.thinmpf.PlayerHostApi.startAllSongs\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startAllSongsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let indexArg = args[0] as! Int64
        let repeatModeArg = args[1] as! RepeatMode
        let shuffleModeArg = args[2] as! ShuffleMode
        do {
          try api.startAllSongs(index: indexArg, repeatMode: repeatModeArg, shuffleMode: shuffleModeArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      startAllSongsChannel.setMessageHandler(nil)
    }
    let startAlbumSongsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.thinmpf.PlayerHostApi.startAlbumSongs\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startAlbumSongsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let indexArg = args[0] as! Int64
        let albumIdArg = args[1] as! String
        let repeatModeArg = args[2] as! RepeatMode
        let shuffleModeArg = args[3] as! ShuffleMode
        do {
          try api.startAlbumSongs(index: indexArg, albumId: albumIdArg, repeatMode: repeatModeArg, shuffleMode: shuffleModeArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      startAlbumSongsChannel.setMessageHandler(nil)
    }
    let startArtistSongsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.thinmpf.PlayerHostApi.startArtistSongs\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startArtistSongsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let indexArg = args[0] as! Int64
        let artistIdArg = args[1] as! String
        let repeatModeArg = args[2] as! RepeatMode
        let shuffleModeArg = args[3] as! ShuffleMode
        do {
          try api.startArtistSongs(index: indexArg, artistId: artistIdArg, repeatMode: repeatModeArg, shuffleMode: shuffleModeArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      startArtistSongsChannel.setMessageHandler(nil)
    }
    let playChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.thinmpf.PlayerHostApi.play\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      playChannel.setMessageHandler { _, reply in
        do {
          try api.play()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      playChannel.setMessageHandler(nil)
    }
    let pauseChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.thinmpf.PlayerHostApi.pause\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      pauseChannel.setMessageHandler { _, reply in
        do {
          try api.pause()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      pauseChannel.setMessageHandler(nil)
    }
    let prevChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.thinmpf.PlayerHostApi.prev\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      prevChannel.setMessageHandler { _, reply in
        do {
          try api.prev()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      prevChannel.setMessageHandler(nil)
    }
    let nextChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.thinmpf.PlayerHostApi.next\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      nextChannel.setMessageHandler { _, reply in
        do {
          try api.next()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      nextChannel.setMessageHandler(nil)
    }
    let seekChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.thinmpf.PlayerHostApi.seek\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      seekChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let timeArg = args[0] as! Double
        do {
          try api.seek(time: timeArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      seekChannel.setMessageHandler(nil)
    }
    let setRepeatChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.thinmpf.PlayerHostApi.setRepeat\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setRepeatChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let repeatModeArg = args[0] as! RepeatMode
        do {
          try api.setRepeat(repeatMode: repeatModeArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setRepeatChannel.setMessageHandler(nil)
    }
    let setShuffleChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.thinmpf.PlayerHostApi.setShuffle\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setShuffleChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let shuffleModeArg = args[0] as! ShuffleMode
        do {
          try api.setShuffle(shuffleMode: shuffleModeArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setShuffleChannel.setMessageHandler(nil)
    }
    let getCurrentTimeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.thinmpf.PlayerHostApi.getCurrentTime\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getCurrentTimeChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getCurrentTime()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getCurrentTimeChannel.setMessageHandler(nil)
    }
  }
}
///
/// FlutterApi
///
///
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol PlayerFlutterApiProtocol {
  func onIsPlayingChange(isPlaying isPlayingArg: Bool, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onPlaybackSongChange(song songArg: SongDTO, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onError(message messageArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class PlayerFlutterApi: PlayerFlutterApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: AudioPigeonCodec {
    return AudioPigeonCodec.shared
  }
  func onIsPlayingChange(isPlaying isPlayingArg: Bool, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.thinmpf.PlayerFlutterApi.onIsPlayingChange\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([isPlayingArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onPlaybackSongChange(song songArg: SongDTO, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.thinmpf.PlayerFlutterApi.onPlaybackSongChange\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([songArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onError(message messageArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.thinmpf.PlayerFlutterApi.onError\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([messageArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
