// Autogenerated from Pigeon (v21.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "Audio.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray<id> *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}

static FlutterError *createConnectionError(NSString *channelName) {
  return [FlutterError errorWithCode:@"channel-error" message:[NSString stringWithFormat:@"%@/%@/%@", @"Unable to establish connection on channel: '", channelName, @"'."] details:@""];
}

static id GetNullableObjectAtIndex(NSArray<id> *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@implementation RepeatStateBox
- (instancetype)initWithValue:(RepeatState)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@interface Song ()
+ (Song *)fromList:(NSArray<id> *)list;
+ (nullable Song *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface Album ()
+ (Album *)fromList:(NSArray<id> *)list;
+ (nullable Album *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface Artist ()
+ (Artist *)fromList:(NSArray<id> *)list;
+ (nullable Artist *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface ArtistDetail ()
+ (ArtistDetail *)fromList:(NSArray<id> *)list;
+ (nullable ArtistDetail *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@implementation Song
+ (instancetype)makeWithId:(NSString *)id
    name:(NSString *)name
    albumId:(NSString *)albumId
    albumName:(NSString *)albumName
    artistId:(NSString *)artistId
    artistName:(NSString *)artistName
    imageId:(NSString *)imageId
    duration:(double )duration
    trackNumber:(double )trackNumber {
  Song* pigeonResult = [[Song alloc] init];
  pigeonResult.id = id;
  pigeonResult.name = name;
  pigeonResult.albumId = albumId;
  pigeonResult.albumName = albumName;
  pigeonResult.artistId = artistId;
  pigeonResult.artistName = artistName;
  pigeonResult.imageId = imageId;
  pigeonResult.duration = duration;
  pigeonResult.trackNumber = trackNumber;
  return pigeonResult;
}
+ (Song *)fromList:(NSArray<id> *)list {
  Song *pigeonResult = [[Song alloc] init];
  pigeonResult.id = GetNullableObjectAtIndex(list, 0);
  pigeonResult.name = GetNullableObjectAtIndex(list, 1);
  pigeonResult.albumId = GetNullableObjectAtIndex(list, 2);
  pigeonResult.albumName = GetNullableObjectAtIndex(list, 3);
  pigeonResult.artistId = GetNullableObjectAtIndex(list, 4);
  pigeonResult.artistName = GetNullableObjectAtIndex(list, 5);
  pigeonResult.imageId = GetNullableObjectAtIndex(list, 6);
  pigeonResult.duration = [GetNullableObjectAtIndex(list, 7) doubleValue];
  pigeonResult.trackNumber = [GetNullableObjectAtIndex(list, 8) doubleValue];
  return pigeonResult;
}
+ (nullable Song *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [Song fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.id ?: [NSNull null],
    self.name ?: [NSNull null],
    self.albumId ?: [NSNull null],
    self.albumName ?: [NSNull null],
    self.artistId ?: [NSNull null],
    self.artistName ?: [NSNull null],
    self.imageId ?: [NSNull null],
    @(self.duration),
    @(self.trackNumber),
  ];
}
@end

@implementation Album
+ (instancetype)makeWithId:(NSString *)id
    name:(NSString *)name
    artistId:(NSString *)artistId
    artistName:(NSString *)artistName
    imageId:(NSString *)imageId {
  Album* pigeonResult = [[Album alloc] init];
  pigeonResult.id = id;
  pigeonResult.name = name;
  pigeonResult.artistId = artistId;
  pigeonResult.artistName = artistName;
  pigeonResult.imageId = imageId;
  return pigeonResult;
}
+ (Album *)fromList:(NSArray<id> *)list {
  Album *pigeonResult = [[Album alloc] init];
  pigeonResult.id = GetNullableObjectAtIndex(list, 0);
  pigeonResult.name = GetNullableObjectAtIndex(list, 1);
  pigeonResult.artistId = GetNullableObjectAtIndex(list, 2);
  pigeonResult.artistName = GetNullableObjectAtIndex(list, 3);
  pigeonResult.imageId = GetNullableObjectAtIndex(list, 4);
  return pigeonResult;
}
+ (nullable Album *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [Album fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.id ?: [NSNull null],
    self.name ?: [NSNull null],
    self.artistId ?: [NSNull null],
    self.artistName ?: [NSNull null],
    self.imageId ?: [NSNull null],
  ];
}
@end

@implementation Artist
+ (instancetype)makeWithId:(NSString *)id
    name:(NSString *)name {
  Artist* pigeonResult = [[Artist alloc] init];
  pigeonResult.id = id;
  pigeonResult.name = name;
  return pigeonResult;
}
+ (Artist *)fromList:(NSArray<id> *)list {
  Artist *pigeonResult = [[Artist alloc] init];
  pigeonResult.id = GetNullableObjectAtIndex(list, 0);
  pigeonResult.name = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable Artist *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [Artist fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.id ?: [NSNull null],
    self.name ?: [NSNull null],
  ];
}
@end

@implementation ArtistDetail
+ (instancetype)makeWithId:(NSString *)id
    name:(NSString *)name
    imageId:(NSString *)imageId {
  ArtistDetail* pigeonResult = [[ArtistDetail alloc] init];
  pigeonResult.id = id;
  pigeonResult.name = name;
  pigeonResult.imageId = imageId;
  return pigeonResult;
}
+ (ArtistDetail *)fromList:(NSArray<id> *)list {
  ArtistDetail *pigeonResult = [[ArtistDetail alloc] init];
  pigeonResult.id = GetNullableObjectAtIndex(list, 0);
  pigeonResult.name = GetNullableObjectAtIndex(list, 1);
  pigeonResult.imageId = GetNullableObjectAtIndex(list, 2);
  return pigeonResult;
}
+ (nullable ArtistDetail *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [ArtistDetail fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.id ?: [NSNull null],
    self.name ?: [NSNull null],
    self.imageId ?: [NSNull null],
  ];
}
@end

@interface nullAudioPigeonCodecReader : FlutterStandardReader
@end
@implementation nullAudioPigeonCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 129: 
      return [Song fromList:[self readValue]];
    case 130: 
      return [Album fromList:[self readValue]];
    case 131: 
      return [Artist fromList:[self readValue]];
    case 132: 
      return [ArtistDetail fromList:[self readValue]];
    case 133: 
      {
        NSNumber *enumAsNumber = [self readValue];
        return enumAsNumber == nil ? nil : [[RepeatStateBox alloc] initWithValue:[enumAsNumber integerValue]];
      }
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface nullAudioPigeonCodecWriter : FlutterStandardWriter
@end
@implementation nullAudioPigeonCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[Song class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[Album class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[Artist class]]) {
    [self writeByte:131];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[ArtistDetail class]]) {
    [self writeByte:132];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[RepeatStateBox class]]) {
    RepeatStateBox * box = (RepeatStateBox *)value;
    [self writeByte:133];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else {
    [super writeValue:value];
  }
}
@end

@interface nullAudioPigeonCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation nullAudioPigeonCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[nullAudioPigeonCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[nullAudioPigeonCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *nullGetAudioCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    nullAudioPigeonCodecReaderWriter *readerWriter = [[nullAudioPigeonCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}
void SetUpSongHostApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<SongHostApi> *api) {
  SetUpSongHostApiWithSuffix(binaryMessenger, api, @"");
}

void SetUpSongHostApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<SongHostApi> *api, NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0 ? [NSString stringWithFormat: @".%@", messageChannelSuffix] : @"";
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.thinmpf.SongHostApi.getAllSongs", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetAudioCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getAllSongsWithError:)], @"SongHostApi api (%@) doesn't respond to @selector(getAllSongsWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSArray<Song *> *output = [api getAllSongsWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.thinmpf.SongHostApi.getSongsByAlbumId", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetAudioCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getSongsByAlbumIdAlbumId:error:)], @"SongHostApi api (%@) doesn't respond to @selector(getSongsByAlbumIdAlbumId:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSString *arg_albumId = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSArray<Song *> *output = [api getSongsByAlbumIdAlbumId:arg_albumId error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.thinmpf.SongHostApi.getSongsByArtistId", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetAudioCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getSongsByArtistIdArtistId:error:)], @"SongHostApi api (%@) doesn't respond to @selector(getSongsByArtistIdArtistId:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSString *arg_artistId = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSArray<Song *> *output = [api getSongsByArtistIdArtistId:arg_artistId error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
void SetUpAlbumHostApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<AlbumHostApi> *api) {
  SetUpAlbumHostApiWithSuffix(binaryMessenger, api, @"");
}

void SetUpAlbumHostApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<AlbumHostApi> *api, NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0 ? [NSString stringWithFormat: @".%@", messageChannelSuffix] : @"";
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.thinmpf.AlbumHostApi.getAllAlbums", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetAudioCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getAllAlbumsWithError:)], @"AlbumHostApi api (%@) doesn't respond to @selector(getAllAlbumsWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSArray<Album *> *output = [api getAllAlbumsWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.thinmpf.AlbumHostApi.getAlbumsByArtistId", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetAudioCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getAlbumsByArtistIdArtistId:error:)], @"AlbumHostApi api (%@) doesn't respond to @selector(getAlbumsByArtistIdArtistId:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSString *arg_artistId = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSArray<Album *> *output = [api getAlbumsByArtistIdArtistId:arg_artistId error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.thinmpf.AlbumHostApi.getRecentAlbums", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetAudioCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getRecentAlbumsCount:error:)], @"AlbumHostApi api (%@) doesn't respond to @selector(getRecentAlbumsCount:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSInteger arg_count = [GetNullableObjectAtIndex(args, 0) integerValue];
        FlutterError *error;
        NSArray<Album *> *output = [api getRecentAlbumsCount:arg_count error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.thinmpf.AlbumHostApi.getAlbumById", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetAudioCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getAlbumByIdId:error:)], @"AlbumHostApi api (%@) doesn't respond to @selector(getAlbumByIdId:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        Album *output = [api getAlbumByIdId:arg_id error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
void SetUpArtistHostApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ArtistHostApi> *api) {
  SetUpArtistHostApiWithSuffix(binaryMessenger, api, @"");
}

void SetUpArtistHostApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ArtistHostApi> *api, NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0 ? [NSString stringWithFormat: @".%@", messageChannelSuffix] : @"";
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.thinmpf.ArtistHostApi.getAllArtists", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetAudioCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getAllArtistsWithError:)], @"ArtistHostApi api (%@) doesn't respond to @selector(getAllArtistsWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSArray<Artist *> *output = [api getAllArtistsWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.thinmpf.ArtistHostApi.getArtistDetailById", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetAudioCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getArtistDetailByIdId:error:)], @"ArtistHostApi api (%@) doesn't respond to @selector(getArtistDetailByIdId:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        ArtistDetail *output = [api getArtistDetailByIdId:arg_id error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
void SetUpArtworkHostApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ArtworkHostApi> *api) {
  SetUpArtworkHostApiWithSuffix(binaryMessenger, api, @"");
}

void SetUpArtworkHostApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ArtworkHostApi> *api, NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0 ? [NSString stringWithFormat: @".%@", messageChannelSuffix] : @"";
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.thinmpf.ArtworkHostApi.getArtwork", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetAudioCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getArtworkId:completion:)], @"ArtworkHostApi api (%@) doesn't respond to @selector(getArtworkId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        [api getArtworkId:arg_id completion:^(FlutterStandardTypedData *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
void SetUpPlayerHostApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<PlayerHostApi> *api) {
  SetUpPlayerHostApiWithSuffix(binaryMessenger, api, @"");
}

void SetUpPlayerHostApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<PlayerHostApi> *api, NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0 ? [NSString stringWithFormat: @".%@", messageChannelSuffix] : @"";
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.thinmpf.PlayerHostApi.startAllSongs", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetAudioCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startAllSongsIndex:error:)], @"PlayerHostApi api (%@) doesn't respond to @selector(startAllSongsIndex:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSInteger arg_index = [GetNullableObjectAtIndex(args, 0) integerValue];
        FlutterError *error;
        [api startAllSongsIndex:arg_index error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.thinmpf.PlayerHostApi.startAlbumSongs", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetAudioCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startAlbumSongsIndex:albumId:error:)], @"PlayerHostApi api (%@) doesn't respond to @selector(startAlbumSongsIndex:albumId:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSInteger arg_index = [GetNullableObjectAtIndex(args, 0) integerValue];
        NSString *arg_albumId = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api startAlbumSongsIndex:arg_index albumId:arg_albumId error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.thinmpf.PlayerHostApi.startArtistSongs", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetAudioCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startArtistSongsIndex:artistId:error:)], @"PlayerHostApi api (%@) doesn't respond to @selector(startArtistSongsIndex:artistId:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSInteger arg_index = [GetNullableObjectAtIndex(args, 0) integerValue];
        NSString *arg_artistId = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api startArtistSongsIndex:arg_index artistId:arg_artistId error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.thinmpf.PlayerHostApi.play", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetAudioCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(playWithError:)], @"PlayerHostApi api (%@) doesn't respond to @selector(playWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api playWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.thinmpf.PlayerHostApi.pause", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetAudioCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(pauseWithError:)], @"PlayerHostApi api (%@) doesn't respond to @selector(pauseWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api pauseWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.thinmpf.PlayerHostApi.prev", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetAudioCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(prevWithError:)], @"PlayerHostApi api (%@) doesn't respond to @selector(prevWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api prevWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.thinmpf.PlayerHostApi.next", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetAudioCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(nextWithError:)], @"PlayerHostApi api (%@) doesn't respond to @selector(nextWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api nextWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.thinmpf.PlayerHostApi.seek", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetAudioCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(seekTime:error:)], @"PlayerHostApi api (%@) doesn't respond to @selector(seekTime:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        double arg_time = [GetNullableObjectAtIndex(args, 0) doubleValue];
        FlutterError *error;
        [api seekTime:arg_time error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.thinmpf.PlayerHostApi.setRepeat", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetAudioCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setRepeatRepeatState:error:)], @"PlayerHostApi api (%@) doesn't respond to @selector(setRepeatRepeatState:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        RepeatStateBox *enumBox = GetNullableObjectAtIndex(args, 0);
        RepeatState arg_repeatState = enumBox.value;
        FlutterError *error;
        [api setRepeatRepeatState:arg_repeatState error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.thinmpf.PlayerHostApi.setShuffle", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetAudioCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setShuffleIsShuffle:error:)], @"PlayerHostApi api (%@) doesn't respond to @selector(setShuffleIsShuffle:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        BOOL arg_isShuffle = [GetNullableObjectAtIndex(args, 0) boolValue];
        FlutterError *error;
        [api setShuffleIsShuffle:arg_isShuffle error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.thinmpf.PlayerHostApi.getCurrentTime", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetAudioCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getCurrentTimeWithError:)], @"PlayerHostApi api (%@) doesn't respond to @selector(getCurrentTimeWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api getCurrentTimeWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface PlayerFlutterApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@property(nonatomic, strong) NSString *messageChannelSuffix;
@end

@implementation PlayerFlutterApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  return [self initWithBinaryMessenger:binaryMessenger messageChannelSuffix:@""];
}
- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger messageChannelSuffix:(nullable NSString*)messageChannelSuffix{
  self = [self init];
  if (self) {
    _binaryMessenger = binaryMessenger;
    _messageChannelSuffix = [messageChannelSuffix length] == 0 ? @"" : [NSString stringWithFormat: @".%@", messageChannelSuffix];
  }
  return self;
}
- (void)onIsPlayingChangeIsPlaying:(BOOL)arg_isPlaying completion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = [NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.thinmpf.PlayerFlutterApi.onIsPlayingChange", _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:nullGetAudioCodec()];
  [channel sendMessage:@[@(arg_isPlaying)] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
- (void)onPlaybackSongChangeSong:(Song *)arg_song completion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = [NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.thinmpf.PlayerFlutterApi.onPlaybackSongChange", _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:nullGetAudioCodec()];
  [channel sendMessage:@[arg_song ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
@end

