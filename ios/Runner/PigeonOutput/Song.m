// Autogenerated from Pigeon (v16.0.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "Song.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}

static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface Song ()
+ (Song *)fromList:(NSArray *)list;
+ (nullable Song *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation Song
+ (instancetype)makeWithId:(NSString *)id
    title:(NSString *)title
    artist:(NSString *)artist {
  Song* pigeonResult = [[Song alloc] init];
  pigeonResult.id = id;
  pigeonResult.title = title;
  pigeonResult.artist = artist;
  return pigeonResult;
}
+ (Song *)fromList:(NSArray *)list {
  Song *pigeonResult = [[Song alloc] init];
  pigeonResult.id = GetNullableObjectAtIndex(list, 0);
  pigeonResult.title = GetNullableObjectAtIndex(list, 1);
  pigeonResult.artist = GetNullableObjectAtIndex(list, 2);
  return pigeonResult;
}
+ (nullable Song *)nullableFromList:(NSArray *)list {
  return (list) ? [Song fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    self.id ?: [NSNull null],
    self.title ?: [NSNull null],
    self.artist ?: [NSNull null],
  ];
}
@end

@interface HostSongApiCodecReader : FlutterStandardReader
@end
@implementation HostSongApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [Song fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface HostSongApiCodecWriter : FlutterStandardWriter
@end
@implementation HostSongApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[Song class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface HostSongApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation HostSongApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[HostSongApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[HostSongApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *HostSongApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    HostSongApiCodecReaderWriter *readerWriter = [[HostSongApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void SetUpHostSongApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<HostSongApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.thinmpf.HostSongApi.findAll"
        binaryMessenger:binaryMessenger
        codec:HostSongApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(findAllWithError:)], @"HostSongApi api (%@) doesn't respond to @selector(findAllWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSArray<Song *> *output = [api findAllWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
